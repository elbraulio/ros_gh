install("DBI")
install.packages("DBI","RSQLite)
install.packages("DBI","RSQLite")
install.packages("DBI")
install.packages("RSQLite")
con = dbConnect(SQLite(), dbname="../v1.db")
library("DBI")
library("SQLite")
library("RSQLite")
con = dbConnect(SQLite(), dbname="../v1.db")
myQuery <- dbSendQuery(con, "SELECT strain FROM behaviour")
query <- "select full_name, nb_commits
from
(select gh_repo_id, count(gh_repo_id) as nb_commits
from gh_commits
group by gh_repo_id) as count_comm
join gh_repo on count_comm.gh_repo_id = gh_repo.id"
myQuery <- dbSendQuery(con, query)
myQuery <- dbSendQuery(con, "SELECT * FROM v1.gh_commits")
con = dbConnect(SQLite(), dbname="../data/v1.db")
myQuery <- dbSendQuery(con, "SELECT * FROM v1.gh_commits")
myQuery <- dbSendQuery(con, query)
myQuery
y_data <- dbFetch(myQuery, n = -1)
y_data
hist(y_data)
hist(y_data$nb_commits)
library(ggplot2)
p <- ggplot(y_data$nb_commits, aes(x=dose, y=len)) +
geom_boxplot()
y_data$nb_commits <- as.factor(y_data$nb_commits)
p <- ggplot(y_data$nb_commits, aes(x=dose, y=len)) +
geom_boxplot()
p <- ggplot(y_data, aes(x=nb_commits, y=len)) +
geom_boxplot()
p
p <- ggplot(y_data, aes(x=nb_commits)) +
geom_boxplot()
p
p <- ggplot(y_data, aes(x=nb_commits,7=nb_commits)) +
geom_boxplot()
p <- ggplot(y_data, aes(x=nb_commits,y=nb_commits)) +
geom_boxplot()
p
p <- ggplot(y_data, aes(x=nb_commits,y=1)) +
geom_boxplot()
p
p <- ggplot(y_data, aes(x=1,y=nb_commits)) +
geom_boxplot()
p
density(y_data$nb_commits)
y_data$nb_commits <- as.numeric(y_data$nb_commits)
density(y_data$nb_commits)
plot(density(y_data$nb_commits))
p <- ggplot(y_data, aes(x=1,y=nb_commits)) +
geom_boxplot()
p
log
log(c(1,2,3))
p <- ggplot(y_data, aes(x=1,y=log(nb_commits)) +
geom_boxplot()
p <- ggplot(y_data, aes(x=1,y=log(nb_commits)) +
geom_boxplot())
p <- ggplot(y_data, aes(x=1,y=log(nb_commits)) +
geom_boxplot()
Â©
p <- ggplot(y_data, aes(x=1,y=log(nb_commits))) +
geom_boxplot()
p
plot(density(log(y_data$nb_commits)))
hist(y_data$nb_commits)
hist(log(y_data$nb_commits))
breaks <- c(10,50,100,150,200,250,300,350,400,450,500)
labels <- c("<10","10,50)","50,100)","100,150)","150,200)","200,250)","250,300)","300,350)","350,400)","400,450)","450,500)")
bins <- cut(y_data$nb_commits, breaks, include.lowest = T, right=FALSE, labels=labels)
breaks <- c(0,10,50,100,150,200,250,300,350,400,450,500)
bins <- cut(y_data$nb_commits, breaks, include.lowest = T, right=FALSE, labels=labels)
summary(bins)
breaks <- c(0,10,50,100,150,200,250,300,350,400,450,500,10000)
labels <- c("<10","10,50)","50,100)","100,150)","150,200)","200,250)","250,300)","300,350)","350,400)","400,450)","450,500)","500,10.000)")
bins <- cut(y_data$nb_commits, breaks, include.lowest = T, right=FALSE, labels=labels)
summary(bins)
summary(y_data$nb_commits)
library(classInt)
bins <- 10
minimumVal<-min(y_data$nb_commits)
maximumVal<-max(y_data$nb_commits)
width<-(maximumVal-minimumVal)/bins
cut(y_data$nb_commits, breaks=seq(minimumVal, maximumVal, width))
cuts <- cut(y_data$nb_commits, breaks=seq(minimumVal, maximumVal, width))
hist(cuts)
table(cuts)
hist(table(cuts))
barplot(table(cuts)))
barplot(table(cuts))
seq(minimumVal, maximumVal, 10)
breaks <- seq(minimumVal, maximumVal, 10)
cuts <- cut(y_data$nb_commits, breaks=seq(minimumVal, maximumVal, width))
barplot(table(cuts))
cuts <- cut(y_data$nb_commits, breaks=breaks)
barplot(table(cuts))
cuts <- cut(y_data$nb_commits, breaks=seq(0, maximumVal, width))
barplot(table(cuts))
cuts <- cut(y_data$nb_commits, breaks=seq(0, maximumVal, 10))
barplot(table(cuts))
ggplot(data=table(cuts), aes(x=cuts,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
stat_count(geom="text", aes(label=..count..), hjust=-0.1) +
theme_bw() +
labs(y="Number of Houses",x="Mean Education Values") +
coord_flip() +
ylim(0,25000) +
scale_x_discrete(drop=FALSE) # include the bins of length zero
plot(cuts)
plot(cuts, ylab="asdsa")
bins <- cuts
y <- cbind(y_data$nb_commits, bins)
ggplot(data=y, aes(x=y$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
stat_count(geom="text", aes(label=..count..), hjust=-0.1) +
theme_bw() +
labs(y="Number of Houses",x="Mean Education Values") +
coord_flip() +
ylim(0,25000) +
scale_x_discrete(drop=FALSE) # include the bins of length zero
y
ggplot(data=y_data, aes(x=DATA$nb_commits)) +
geom_density(fill='lightblue') +
geom_rug() +
labs(x='mean education per house')
ggplot(data=y_data, aes(x=y_data$nb_commits)) +
geom_density(fill='lightblue') +
geom_rug() +
labs(x='mean education per house')
ggplot(data=y_data, aes(x=bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
stat_count(geom="text", aes(label=..count..), hjust=-0.1) +
theme_bw() +
labs(y="Number of Houses",x="Mean Education Values") +
coord_flip() +
ylim(0,25000) +
scale_x_discrete(drop=FALSE) # include the bins of length zero
library(readr)
questions <- read_csv("~/Sync/projects/ros_gh/data-description/questions.csv",
na = "null")
View(questions)
questions[questions == NA] <- 0
View(questions)
questions
questions$nb_of_tags[is.na(questions$nb_of_tags)] <- 0
questions$nb_of_tags[is.na(questions$nb_of_tags)] <- 0
questions[is.na(questions$nb_of_tags)] <- 0
questions$nb_of_answers[is.na(questions$nb_of_answers)] <- 0
questions$nb_of_comments[is.na(questions$nb_of_comments)] <- 0
library(readr)
question_tags_frequency <- read_csv("~/Sync/projects/ros_gh/data-description/question_tags_frequency.csv")
View(question_tags_frequency)
library(readr)
users_tags_frequency <- read_csv("~/Sync/projects/ros_gh/data-description/users_tags_frequency.csv")
View(users_tags_frequency)
summary(questions)
c(questions$view_count, questions$votes, questions$nb_of_tags)
c(questions$view_count, questions$votes, questions$nb_of_tags)
boxplot(c(questions$view_count, questions$votes, questions$nb_of_tags),  main="title", xlab='x label', ylab='y label')
boxplot(data=c(questions$view_count, questions$votes, questions$nb_of_tags),  main="title", xlab='x label', ylab='y label')
boxplot(c("view_count", "votes"), questions)
boxplot(questions, names("votes", "view_count") )
boxplot(questions, names("votes", "view_count") ))
boxplot(questions, names= c("votes", "view_count") ))
boxplot(questions, names= c("votes", "view_count") )
question$view_count[>15.000]
question$view_count[x>15000]
questions$view_count[x>15000]
questions$view_count[questions$view_count>15000]
len(questions$view_count[questions$view_count>15000])
length(questions$view_count[questions$view_count>15000])
length(questions$view_count[questions$view_count<15000])
length(questions$view_count[questions$view_count>8000])
length(questions$view_count[questions$view_count>8000])/40995
length(questions$view_count[questions$view_count>8000])/40995*100
View(question_tags_frequency)
summary(question_tags_frequency$freq)
summary(question_tags_user$freq)
summary(question_tags_users$freq)
summary(users_tags_frequency$freq)
users_tags_frequency$freq[users_tags_frequency$freq>50]
length(users_tags_frequency$freq[users_tags_frequency$freq>50])
length(users_tags_frequency$freq[users_tags_frequency$freq<50])
f_thres = c(5,40,5)
f_thres
seq(5,40,by=5)
f_t = seq(5,40,by=5)
n_t = c(3341,1927,1302,999,814,697,603,528,457,410)
cov_q = c(97.3,95.3,93.5,92,90.8,89.7,88.6,87.5,86.5,85.4)
length(f_t) = length(n_t)
f_t
f_t = seq(5,40,by=5)
n_t = c(3341,1927,1302,999,814,697,603,528,457,410)
cov_q = c(97.3,95.3,93.5,92,90.8,89.7,88.6,87.5,86.5,85.4)
length(f_t) == length(n_t)
length(f_t)
length(n_t)
f_t = seq(5,50,by=5)
length(f_t) == length(n_t)
plot(f_t)
plot(f_t,n_t)
plot(f_t,n_t,lines=true)
plot(f_t,n_t,lines=TRUE)
plot(f_t,n_t,cov_q)
plot(f_t,n_t, type='l')
library("ggplot2")
df = data.frame(f_t,n_t,cov_q)
plot(df)
help(plot))
help(plot)
help("line")
help(matplot)
matplot(df)
matplot(df, type=l)
help(matplot)
plot(df$f_t,df$n_t)
plot(df$f_t,df$n_t, type=l)
plot(df$f_t,df$n_t, type="l"")
plot(df$f_t,df$n_t, type="l")
plot(df$f_t,df$n_t, type="l")
lines(df$f_t,df$n_t, lwd=2)
lines(df$f_t,df$cov_q, lwd=2, col="red")
plot(df$f_t,df$n_t, type="l")
lines(df$f_t,df$cov_q, lwd=2, col="red")
plot(df$f_t,df$cov_q, lwd=2, col="red")
plot(df$f_t,df$cov_q, lwd=2, type="l" col="red")
plot(df$f_t,df$cov_q, lwd=2, type="l", col="red")
lines(df$f_t, df$cov_q)
plot(df$f_t,df$cov_q, lwd=2, type="l", col="red")
lines(df$f_t,df$n_t, lwd=2, type="l", col="blue")
df$n_t
df$cov_q
